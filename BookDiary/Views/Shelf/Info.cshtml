@model BookDiary.Models.ViewModels.ShelfViewModels.ShelfInfoViewModel

<div class="container py-4">
    <div class="row">
        <!-- Shelf Information Column -->
        <div class="col-md-4">
            <div class="card border-0 shadow-lg mb-4">
                <div class="card-header bg-gradient text-white p-4" style="background-color: #8B6B4F;">
                    <h2 class="mb-0 fw-bold"><i class="fas fa-book-open me-2"></i>Шкаф</h2>
                </div>
                <div class="card-body p-4">
                    <h3 class="text-brown mb-3">@Model.Name</h3>
                    <p class="text-muted mb-4">@Model.Description</p>

                    <div class="d-flex justify-content-between">
                        <a href="javascript:history.back()" class="btn btn-outline-secondary px-4 py-2">
                            <i class="fas fa-arrow-left me-2"></i>Назад
                        </a> 
                        @if(Model.Name!="Прочетени книги"){

                        
                        <a asp-action="Edit" asp-controller="Shelf" asp-route-id="@Model.Id" class="btn text-white px-4 py-2" style="background-color: #5C4033;">
                            <i class="fas fa-edit me-2"></i>Обнови шкаф
                        </a>
                        }
                        <form method="post" asp-controller="Shelf" asp-action="Delete" asp-route-id="@Model.Id">
                            <button type="submit" class="btn btn-danger px-4 py-2">
                                <i class="fas fa-trash-alt me-2"></i>Изтрий
                            </button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Shelf Statistics Card -->
            <div class="card border-0 shadow-lg">
                <div class="card-body p-4">
                    <h4 class="text-brown mb-3">Статистики</h4>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Всичкни книги:</span>
                        <span class="fw-bold">@Model.Books.Count</span>
                    </div>
                    @if (Model.Books.Any())
                    {
                        <div class="d-flex justify-content-between mb-2">
                            <span>Автори:</span>
                            <span class="fw-bold">@Model.Books.Select(b => b.Author).Distinct().Count()</span>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Books Display Column -->
        <div class="col-md-8">
            <h3 class="text-brown mb-4">Книги в този шкаф</h3>

            @if (!Model.Books.Any())
            {
                <div class="alert" style="background-color: #F5F5DC; color: #5C4033; border-color: #D2B48C;">
                    <i class="fas fa-info-circle me-2"></i> Все още няма книги
                </div>
               
            }
            else
            {
                <div class="bookshelf">
                    @foreach (var book in Model.Books)
                    {
                        <div class="book-spine" data-title="@book.Title" data-author="@book.Author" data-image="@book.CoverImageURL" data-id="@book.Id">
                            <div class="spine-text">
                                <div class="spine-title">@book.Title</div>
                                <div class="spine-author">@book.Author</div>
                            </div>
                        </div>
                    }
                </div>

                <div class="book-preview-container">
                    <div class="book-preview">
                        <div class="book-cover">
                            <img src="" alt="Book cover" class="cover-image">
                            <div class="cover-fallback">
                                <span class="cover-initial"></span>
                            </div>
                        </div>
                        <div class="book-info">
                            <h4 class="preview-title"></h4>
                            <p class="preview-author"></p>
                            <div class="d-flex mt-3">
                               
                                <form method="post" class="remove-book-form" asp-controller="Shelf" asp-action="DeleteShelfBook" >
                                    <input type="hidden" name="bookId" class="book-id-input" value="">
                                    <input type="hidden" name="shelfid" value="@Model.Id">
                                    <button type="submit" class="btn btn-sm btn-danger">
                                        <i class="fas fa-minus-circle me-1"></i> Премахни книга от шкаф
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

               
            }
        </div>
    </div>
</div>

<style>
    .text-brown {
        color: #5C4033;
    }

    /* Bookshelf styling */
    .bookshelf {
        background-color: #8B6B4F;
        border-radius: 8px;
        padding: 15px 10px 10px;
        display: flex;
        height: 300px;
        margin-bottom: 30px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        overflow-x: auto;
        align-items: flex-end;
        border-bottom: 20px solid #5C4033;
    }

    /* Book spine styling */
    .book-spine {
        height: 230px; /* Increased height */
        width: 55px; /* Increased width */
        margin: 0 5px; /* More spacing between books */
        background-color: #DEB887;
        border-radius: 4px 0 0 4px;
        box-shadow: -3px 3px 7px rgba(0, 0, 0, 0.2);
        position: relative;
        cursor: pointer;
        transition: transform 0.3s, box-shadow 0.3s;
        overflow: hidden;
        flex-shrink: 0;
        border-left: 2px solid rgba(255, 255, 255, 0.2);
    }

        .book-spine:hover {
            transform: translateY(-15px);
            box-shadow: -5px 8px 10px rgba(0, 0, 0, 0.3);
            z-index: 10;
        }

        .book-spine.active {
            transform: translateY(-15px);
            box-shadow: -4px 10px 12px rgba(0, 0, 0, 0.4);
        }

    .spine-text {
        position: absolute;
        width: 230px; /* Match height of spine */
        height: 45px; /* More space for text */
        top: 95px; /* Adjusted for new dimensions */
        left: -90px; /* Adjusted for new dimensions */
        transform: rotate(90deg);
        display: flex;
        flex-direction: column;
        justify-content: center;
        text-align: center;
        padding: 0 8px;
    }

    .spine-title {
        font-size: 14px; /* Larger font */
        font-weight: bold;
        color: #5C4033;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        margin-bottom: 3px;
    }

    .spine-author {
        font-size: 11px; /* Larger font */
        font-style: italic;
        color: #8B4513;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    /* Book preview styling */
    .book-preview-container {
        display: none;
        margin-bottom: 20px;
        padding: 20px;
        background-color: #F5F5DC;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .book-preview {
        display: flex;
        align-items: center;
    }

    .book-cover {
        width: 120px;
        height: 180px;
        margin-right: 20px;
        background-color: #DEB887;
        border-radius: 5px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        position: relative;
    }

    .cover-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .cover-fallback {
        display: none;
        width: 100%;
        height: 100%;
        justify-content: center;
        align-items: center;
    }

    .cover-initial {
        font-size: 64px;
        font-weight: bold;
        color: rgba(255, 255, 255, 0.8);
    }

    .book-info {
        flex: 1;
    }

    .preview-title {
        color: #5C4033;
        margin-bottom: 10px;
    }

    .preview-author {
        font-style: italic;
        color: #8B4513;
        margin-bottom: 20px;
    }

    /* Button styling */
    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
        color: white;
        transition: all 0.3s;
    }

        .btn-danger:hover {
            background-color: #c82333;
            border-color: #bd2130;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

    /* For mobile view */
    media (max-width: 768px) {
        .bookshelf

    {
        height: 250px;
    }

    .book-spine {
        height: 190px;
        width: 45px;
    }

    .spine-text {
        top: 80px;
        width: 190px;
    }

    .book-preview {
        flex-direction: column;
        text-align: center;
    }

    .book-cover {
        margin-right: 0;
        margin-bottom: 15px;
    }

    .d-flex.justify-content-between {
        flex-wrap: wrap;
        gap: 10px;
    }

        .d-flex.justify-content-between > * {
            flex: 1 0 auto;
        }

    }
</style>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Add animation for page load
            $(".card").hide().fadeIn(500);
            $(".book-spine").each(function(index) {
                $(this).hide().delay(50 * index).fadeIn(300);

                // Assign random heights to book spines for visual variety
                var randomHeight = Math.floor(Math.random() * 40) + 200; // 200-240px
                $(this).css('height', randomHeight + 'px');

                // Assign random colors to book spines
                const colors = [
                    '#DEB887', '#D2B48C', '#CD853F', '#C19A6B', '#E9C699',
                    '#D3A77D', '#B88A5D', '#AE784F', '#D4985E', '#BC8F8F'
                ];
                const randomColor = colors[Math.floor(Math.random() * colors.length)];
                $(this).css('background-color', randomColor);
            });

            // Book spine click handler
            $(".book-spine").click(function() {
                // Remove active class from all spines
                $(".book-spine").removeClass("active");
                // Add active class to the clicked spine
                $(this).addClass("active");

                // Get book data
                const title = $(this).data("title");
                const author = $(this).data("author");
                const imageUrl = $(this).data("image");
                const bookId = $(this).data("id");

                // Update preview content
                $(".preview-title").text(title);
                $(".preview-author").text(author);
                $(".view-book-btn").attr("href", "/Book/Info/" + bookId);
                $(".book-id-input").val(bookId);

                // Handle cover image
                if (imageUrl && imageUrl !== "null" && imageUrl !== "") {
                    $(".cover-image").attr("src", imageUrl).show();
                    $(".cover-fallback").hide();
                } else {
                    $(".cover-image").hide();
                    $(".cover-fallback").css("display", "flex");

                    // Create a fallback with the first letter
                    const firstLetter = title.charAt(0).toUpperCase();
                    $(".cover-initial").text(firstLetter);

                    // Set the background color based on the first letter
                    $(".cover-fallback").css("background-color", getColorFromLetter(firstLetter));
                }

                // Show the preview container
                $(".book-preview-container").fadeIn(300);
            });

            // Select the first book by default
            if ($(".book-spine").length > 0) {
                $(".book-spine").first().click();
            }

            // Function to get a color based on the first letter of the book title
            function getColorFromLetter(letter) {
                const colors = [
                    '#8B4513', '#A0522D', '#D2B48C', '#DEB887', '#CD853F',
                    '#C19A6B', '#836953', '#6B4226', '#BC8F8F'
                ];

                // Get a consistent color based on the letter
                const index = letter.charCodeAt(0) % colors.length;
                return colors[index];
            }
        });
    </script>
}
